#
# https://learn.microsoft.com/en-us/visualstudio/ide/cpp-editorconfig-properties?view=vs-2019&viewFallbackFrom=vs-2022
#

root=true

[*.{c++,cc,cpp,cxx,h,h++,hh,hpp,hxx,inl,ipp,tlh,tli}]

indent_style = space
indent_size = 4
max_line_length = 160
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true

# Indentation settings

# Example:
#
#     void f()    --  void f()
#     {                   {
#        stuff;           stuff;
#     }                   }
#
# Indent braces
# Name: cpp_indent_braces
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_indent_braces = false

# Indent each line relatively to
# Name: cpp_indent_multi_line_relative_to
# Values:
# outermost_parenthesis - When a new line is typed, it's indented relatively to the outermost open parenthesis.
# innermost_parenthesis - When a new line is typed, it's indented relatively to the innermost open parenthesis.
# statement_begin - When a new line is typed, it's indented relatively to the beginning of the current statement.
# Editor support: Visual Studio, Visual Studio Code
cpp_indent_multi_line_relative_to = statement_begin

# Example:
#
#    int a = (1 + 2 -        --        int a = (1 + 2 -
#        (4 - 5));                              (4 - 5));
#
#
# Within parentheses, align new lines when I type them
# Name: cpp_indent_within_parentheses
# Values:
# align_to_parenthesis - Align contents to opening parenthesis.
# indent - Indent new lines.
# Editor support: Visual Studio, Visual Studio Code
cpp_indent_within_parentheses = align_to_parenthesis

# In existing code, do not use the setting for alignment of new lines within parentheses
# Name: cpp_indent_preserve_within_parentheses
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_indent_preserve_within_parentheses = false

# Example:
#
#    switch (a) {         --     switch (a) {
#        case 1:                     case 1:
#        break;                          break;
#    }                           } 
#
# Indent case contents
# Name: cpp_indent_case_contents
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_indent_case_contents = true

# Example:
#
#    switch (a) {         --     switch (a) {
#    case 1:                         case 1:
#        break;                          break;
#    }                           } 
#
# Indent case labels
# Name: cpp_indent_case_labels
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_indent_case_labels = false

# Example:
#
#    switch (a) {         --     switch (a) {
#    case 1:                     case 1:
#    {                               {
#    }                               }
#    break;                          break;
#    }                           }
#
# Indent braces following a case statement
# Name: cpp_indent_case_contents_when_block
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_indent_case_contents_when_block = true

# Example:
#
#    std::thread([](){    --     std::thread([](){
#                });             });
#
# Indent braces of lambdas used as parameters
# Name: cpp_indent_lambda_braces_when_parameter
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_indent_lambda_braces_when_parameter = false

# Position of goto labels
# Name: cpp_indent_goto_labels
# Values:
# one_left - One indent to the left
# leftmost_column - Move to the leftmost column
# none - Leave indented
# Editor support: Visual Studio, Visual Studio Code
cpp_indent_goto_labels = none

# Position of preprocessor directives
# Name: cpp_indent_preprocessor
# Values:
# one_left - One indent to the left
# leftmost_column - Move to the leftmost column
# none - Leave indented
# Editor support: Visual Studio, Visual Studio Code
cpp_indent_preprocessor = none

# Example:
#
#    class A {    --    class A {
#    private:               private:
#        int i;             int i;
#    };                 };
#
# Indent access specifiers
# Name: cpp_indent_access_specifiers
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_indent_access_specifiers = false

# Example:
#
#    namespace N  --  namespace N
#    {                {
#    void f();            void f();
#    }                }
#
# Indent namespace contents
# Name: cpp_indent_namespace_contents
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_indent_namespace_contents = false

# Preserve indentation of comments
# Name: cpp_indent_preserve_comments
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_indent_preserve_comments = true

#
# Newline settings
#

# Position of open braces for namespaces
# Name: cpp_new_line_before_open_brace_namespace
# Values:
# new_line - Move to a new line
# same_line - Keep on the same line, but add a space before
# ignore - Don't automatically reposition
# Editor support: Visual Studio, Visual Studio Code
cpp_new_line_before_open_brace_namespace = new_line

# Position of open braces for types
# Name: cpp_new_line_before_open_brace_type
# Values:
# new_line - Move to a new line
# same_line - Keep on the same line, but add a space before
# ignore - Don't automatically reposition
# Editor support: Visual Studio, Visual Studio Code
cpp_new_line_before_open_brace_type = new_line

# Position of open braces for functions
# Name: cpp_new_line_before_open_brace_function
# Values:
# new_line - Move to a new line
# same_line - Keep on the same line, but add a space before
# ignore - Don't automatically reposition
# Editor support: Visual Studio, Visual Studio Code
cpp_new_line_before_open_brace_function = new_line

# Position of open braces for control blocks
# Name: cpp_new_line_before_open_brace_block
# Values:
# new_line - Move to a new line
# same_line - Keep on the same line, but add a space before
# ignore - Don't automatically reposition
# Editor support: Visual Studio, Visual Studio Code
cpp_new_line_before_open_brace_block = new_line

# Position of open braces for lambdas
# Name: cpp_new_line_before_open_brace_lambda
# Values:
# new_line - Move to a new line
# same_line - Keep on the same line, but add a space before
# ignore - Don't automatically reposition
# Editor support: Visual Studio, Visual Studio Code
cpp_new_line_before_open_brace_lambda = new_line

# Place scope braces on separate lines
# Name: cpp_new_line_scope_braces_on_separate_lines
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_new_line_scope_braces_on_separate_lines = true

# For empty types, move closing braces to the same line as opening braces
# Name: cpp_new_line_close_brace_same_line_empty_type
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_new_line_close_brace_same_line_empty_type = false

# For empty function bodies, move closing braces to the same line as opening braces
# Name: cpp_new_line_close_brace_same_line_empty_function
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_new_line_close_brace_same_line_empty_function = false

# Place 'catch' and similar keywords on a new line
# Name: cpp_new_line_before_catch
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_new_line_before_catch = true

# Place 'else' on a new line
# Name: cpp_new_line_before_else
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_new_line_before_else = true

# Place 'while' in a do-while loop on a new line
# Name: cpp_new_line_before_while_in_do_while
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_new_line_before_while_in_do_while = true

#
# Spacing settings
#

# Example:
#
#    void f (int a);    --    void f(int a);
#
# Spacing between function names and opening parentheses of argument lists
# Name: cpp_space_before_function_open_parenthesis
# Values:
# insert - Insert a space
# remove - Remove spaces
# ignore - Don't change spaces
# Editor support: Visual Studio, Visual Studio Code
cpp_space_before_function_open_parenthesis = remove

# Example:
#
#    f(a,b,c);    --    f( a,b,c );
#
# Insert space within parentheses of an argument list
# Name cpp_space_within_parameter_list_parentheses
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_space_within_parameter_list_parentheses = false

# Example:
#
#    f();    --    f( );
#
# Insert space between parentheses when argument list is empty
# Name: cpp_space_between_empty_parameter_list_parentheses
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_space_between_empty_parameter_list_parentheses = false

# Example:
#
#    if(condition)          --    if (condition)
#    for(auto i : items)    --    for (auto i : item)
#
# Insert space between keyword and opening parenthesis in control flow statements
# Name: cpp_space_after_keywords_in_control_flow_statements
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_space_after_keywords_in_control_flow_statements = true

# Example:
#
#   if (condition)   --   if ( condition )
#
# Insert space within parentheses of a control statement
# Name: cpp_space_within_control_flow_statement_parentheses
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_space_within_control_flow_statement_parentheses = false

# Example:
#
#   [](){}   --   [] (){}
#
# Insert space before opening parenthesis of lambda argument lists
# Name: cpp_space_before_lambda_open_parenthesis
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_space_before_lambda_open_parenthesis = false

# Example:
#
#   (int)expression   --   ( int )expression
#
# Insert space within parentheses of a C-style cast
# Name: cpp_space_within_cast_parentheses
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_space_within_cast_parentheses = false

# Example:
#
#   (int)expression   --   (int) expression
#
# Insert space after closing parenthesis of C-style cast
# Name: cpp_space_after_cast_close_parenthesis
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_space_after_cast_close_parenthesis = false

# Example:
#
#   (expression)   --   ( expression )
#
# Insert space within parentheses of a parenthesized expression
# Name: cpp_space_within_expression_parentheses
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_space_within_expression_parentheses = false

# Insert space before opening brace of blocks
# Name: cpp_space_before_block_open_brace
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_space_before_block_open_brace = true

# Example:
#
#    int a{};    --    int a{ };
#
# Insert space between empty braces
# Name: cpp_space_between_empty_braces
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_space_between_empty_braces = false

# Example:
#
#   std::vector<int> v{1,2,3,4};  --  std::vector<int> v {1,2,3,4};
#
# Insert space before opening brace of uniform initialization and initializer lists
# Name: cpp_space_before_initializer_list_open_brace
# Values: true, false
cpp_space_before_initializer_list_open_brace = false

# Example:
#
#   std::vector<int> v{1,2,3,4};  --  std::vector<int> v{ 1,2,3,4 };
#
# Insert space within braces of uniform initialization and initializer lists
# Name: cpp_space_within_initializer_list_braces
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_space_within_initializer_list_braces = false

# Preserve spaces inside uniform initialization and initializer lists
# Name: cpp_space_preserve_in_initializer_list
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_space_preserve_in_initializer_list = false

# Example:
#
#   items[0]  --  items [0]
#
# Insert space before opening square brackets
# Name: cpp_space_before_open_square_bracket
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_space_before_open_square_bracket = false

# Example:
#
#   items[0]  --  items[ 0 ]
#
# Insert space within square bracket
# Name: cpp_space_within_square_brackets
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_space_within_square_brackets = false

# Example:
#
#   char items[]  --  char items []
#
# Insert space before empty square brackets
# Name: cpp_space_before_empty_square_brackets
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_space_before_empty_square_brackets = false

# Example:
#
#   char items[]  --  char items[ ]
#
# Insert space between empty square brackets
# Name: cpp_space_between_empty_square_brackets
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_space_between_empty_square_brackets = false

# Group square brackets for multi-dimensional arrays together
# Name: cpp_space_group_square_brackets
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_space_group_square_brackets = false

# Example:
#
#   [&](){}  --  [ & ](){}
#
# Insert space within square brackets for lambdas
# Name: cpp_space_within_lambda_brackets
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_space_within_lambda_brackets = false

# Example:
#
#   [](){}  --  [ ](){}
#
# SpaceBetweenEmptyLambdaBrackets
# Name: cpp_space_between_empty_lambda_brackets
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_space_between_empty_lambda_brackets = false

# Example:
#
#   a,b,c  --  a ,b ,c
#
# Insert space before commas
# Name: cpp_space_before_comma
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_space_before_comma = false

# Example:
#
#   a,b,c  --  a, b, c
#
# Insert space after commas
# Name: cpp_space_after_comma
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_space_after_comma = true

# Remove spaces before and after member operators
# Name: cpp_space_remove_around_member_operators
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_space_remove_around_member_operators = true

# Example:
#
#   class A:B  --  class A :B
#
# Insert space before colon for base in type declarations
# Name: cpp_space_before_inheritance_colon
# Values: true, false
cpp_space_before_inheritance_colon = true

# Example:
#
#   Constructor():data{1}{}  --  Constructor() :data{1}{}
#
# Insert space before colon for constructors
# Name: cpp_space_before_constructor_colon
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_space_before_constructor_colon = true

# Example:
#
#   "DoIt() ;" --> "DoIt();"
#
# Remove space before semicolons
# Name: cpp_space_remove_before_semicolon
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_space_remove_before_semicolon = true

# Example:
#
#   "for(int i=0;i<100;++i)" --> "for(int i=0; i<100; ++i)"
#
# Insert space after semicolons
# Name: cpp_space_after_semicolon
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_space_after_semicolon = true

# Example:
#
#   "++ i" --> "++i"
#
# Remove spaces between unary operators and their operands
# Name: cpp_space_remove_around_unary_operator
# Values: true, false
# Editor support: Visual Studio, Visual Studio Code
cpp_space_remove_around_unary_operator = true

# Example:
#
#   "a+b" --> "a + b"
#
# Spacing for binary operators
# Name: cpp_space_around_binary_operator
# Values:
# insert - Insert spaces before and after binary operators.
# remove - Remove spaces around binary operators.
# ignore - Don't change spaces around binary operators.
# Editor support: Visual Studio, Visual Studio Code
cpp_space_around_binary_operator = insert

# Example:
#
#   "a=b" -- "a = b"
#
# Spacing for assignment operators
# Name: cpp_space_around_assignment_operator
# Values:
# insert - Insert spaces around assignment operators.
# remove - Remove spaces around assignment operators.
# ignore - Don't change spaces around assignment operators.
# Editor support: Visual Studio, Visual Studio Code
cpp_space_around_assignment_operator = insert

# Example:
#
#   "Type &ref;"  --  "Type& ref;"
#
# Pointer/reference alignment
# Name: cpp_space_pointer_reference_alignment
# Values:
# left - Align left.
# center - Align center.
# right - Align right.
# ignore - Leave unchanged.
# Editor support: Visual Studio, Visual Studio Code
cpp_space_pointer_reference_alignment = left

# Example:
#
#   "a?b:c"  --  "a ? b : c"
#
# Spacing for conditional operators
# Name: cpp_space_around_ternary_operator
# Values:
# insert - Insert spaces around conditional operators.
# remove - Remove spaces around conditional operators.
# ignore - Don't change spaces around conditional operators.
# Editor support: Visual Studio, Visual Studio Code
cpp_space_around_ternary_operator = insert

#
# Wrapping options
#

# Example:
#
#    "for (auto item : items) { work[i] = true; }"  --  "for (auto item : items) {
#                                                            work[i] = true; }"
#                                                        }
#
# Wrapping options for blocks
# Name: cpp_wrap_preserve_blocks
# Values:
# one_liners - Don't wrap one-line code blocks.
# all_one_line_scopes - Don't wrap code blocks where opening and closing braces are on the next line.
# never - Always apply New Lines settings for blocks.
# Editor support: Visual Studio, Visual Studio Code
cpp_wrap_preserve_blocks = one_liners
